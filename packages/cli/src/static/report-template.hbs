<html>

<head>
  <meta charset="utf-8">
  <title>{{reportTitles.plotTitle}}</title>
  <meta name="description" content="">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  {{!-- TRACERBENCH-CHART-BOOTSTRAP.CSS --}}
  <style>
    @media print {
      .page-break {
        page-break-before: always;
      }
      .print-only {
        display: inherit;
      }

      .display-only {
        display: none;
      }
    }

    @media screen {
      .page-break {
        margin-bottom: 10em;
      }

      .print-only {
        display: none;
      }

      .display-only {
        display: inherit;
      }
    }

    .full-width-chart {
      width: 100%;
    }
  </style>
</head>

<body>
  <div class="container">
    <div class="row">
      <div class="col">
        <h1>TracerBench: Boxplot Results</h1>
        <p>{{reportTitles.plotTitle}}</p>
        <hr>
      </div>
    </div>
    {{>phaseDetailSection analysisForPhase=durationSection}}
    <div class="row">
      <div class="col">
        <h3>Sub Phases of Duration</h3>
        <p>The chart below shows the finish times (a point in the page load duration) of the sub phases for experiment and control. It gives a high level view on what also changed (if there are any).</p>
        <p><span class="print-only">You can view more details about the phases starting from page 2.</span><span class="display-only">You can view more details about the phases in the below in the "Sub Phases in Detail" section.</span></p>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <canvas id="all-in-one-chart" class="full-width-chart"></canvas>
      </div>
    </div>

    <div class="page-break"></div>
    <div class="row">
      <div class="col">
        <h1>Sub Phases in Detail</h1>
        <p>Sorted by phases that regressed with the most magnitude.</p>
        <hr>
      </div>
    </div>

    {{#each subPhaseSections as |analysisForPhase|}}
      {{>phaseDetailSection analysisForPhase=analysisForPhase}}
    {{/each}}
    <div class="row mt-5">
      <div class="col">
        <hr>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <h1>Resources</h1>
        <ul>
          <li><a href="https://github.com/TracerBench/tracerbench/#statistics-primer"
              target="_blank">Stats Primer</a></li>
          <li><a href="https://towardsdatascience.com/understanding-boxplots-5e2df7bcbd51" target="_blank">Understanding
              Boxplots</a></li>
          <li><a href="https://en.wikipedia.org/wiki/Wilcoxon_signed-rank_test" target="_blank">Wilcoxon Signed-Rank
              Test</a></li>
        </ul>
      </div>
    </div>
  </div>
  {{!-- TRACERBENCH-CHART-JS --}}
  {{>phaseChartJSSection analysisForPhase=durationSection}}

  {{#each subPhaseSections as |analysisForPhase|}}
    {{>phaseChartJSSection analysisForPhase=analysisForPhase}}
  {{/each}}

  <script>
    function randomValues(count, min, max) {
      const delta = max - min;
      return Array.from({length: count}).map(() => Math.random() * delta + min);
    }

    const boxplotData = {
      // define label tree
      labels: {{{cumulativeChartData.categories}}},
      datasets: [{
        label: '{{reportTitles.servers.[0].name}}',
        borderColor: '#0A2D46',
        backgroundColor: 'rgba(199, 241, 106, 0.50)',
        borderWidth: 1,
        itemBackgroundColor: '#1884E4',
        data: {{cumulativeChartData.controlData}}
      }, {
        label: '{{reportTitles.servers.[1].name}}',
        borderColor: '#0A2D46',
        backgroundColor: 'rgba(56, 210, 211, 0.50)',
        borderWidth: 1,
        itemBackgroundColor: '#1884E4',
        data: {{cumulativeChartData.experimentData}}
      }]
    };

      const ctx = document.getElementById("all-in-one-chart").getContext("2d");
      window.myBar = new Chart(ctx, {
        type: 'boxplot',
        data: boxplotData,
        options: {
          aspectRatio: 1.5,
          legend: {
            position: 'top',
          },
          title: {
            display: false,
            text: 'Sub Phases of Duration (when they finished happening in the timeline)'
          },
          scales: {
            yAxes: [{
              ticks: {
                callback: function(value) {
                  return `${value} ms`;
                }
              }
            }]
          }
        }
      });

  </script>
</body>

</html>